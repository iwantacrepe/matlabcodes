clc;
clear all;
format short;

%% Input Parameters
A = [3 -1 1 1 0 0;
     -1 2 0 0 1 0;
     -4 3 8 0 0 1];   %% Constraint Values
b = [7; 6; 10];       %% RHS of constraint
C = [-1 3 -3 0 0 0];  %% Cost of LPP

%% No.of constraints and variables
[m, n] = size(A);        %% Number of constraints and variables

%% Compute nCm BFS
nv = nchoosek(n, m);     %% Total basic solutions
combinations = nchoosek(1:n, m);    %% Pairs of basic solutions indices

%% Construct Basic Solutions
solutions = [];
feasible_solutions = [];
for i = 1:nv
    x = zeros(n, 1);  % Initialize solution vector
    B = A(:, combinations(i, :));  % Extract basis using current combination

    if det(B) ~= 0  % Check if the basis is non-singular
        x(combinations(i, :)) = B\b;  % Solve Bx = b for basic variables

        % Check for feasibility: non-negative and finite values
        if all(x(combinations(i, :)) >= 0 & isfinite(x(combinations(i, :))))
            solutions = [solutions, x];  % Store all solutions
            feasible_solutions = [feasible_solutions, x];  % Store feasible solutions
        end
    end
end

%% Objective Function Evaluation
Z = C * feasible_solutions;

%% Finding the Optimal Value
if isempty(Z)
    error('No feasible solutions found.');
else
    [Zmax, Zind] = max(Z);
    BFS = feasible_solutions(:, Zind);

    %% Display the Optimal Solution
    disp('Optimal BFS:');
    disp(BFS');
    disp(['Maximum Value of Objective Function, Z: ', num2str(Zmax)]);

    %% Print All Solutions
    optval = [BFS' Zmax];
    OPTIMAL_BFS = array2table(optval);
    OPTIMAL_BFS.Properties.VariableNames = {'x_1','x_2','x_3','s_1','s_2','s_3','Value_of_Z'};
    disp(OPTIMAL_BFS);
end

def compare_table(table, config_df, sf_conn, vt_conn, summary, output_path, first_write):
    sub = config_df[config_df["Table Name"].str.casefold() == table.casefold()]
    if (sub["Flag"].str.casefold() == "stage").any():
        summary.append(f"{table}: Skipped (Stage flagged)")
        return first_write

    key_cols = sub[sub["Flag"].str.casefold() == "key"]["Column Name"].tolist()
    exclude_cols = sub[sub["Flag"].str.casefold() == "exclude"]["Column Name"].tolist()
    filter_cols = sub[sub["Flag"].str.casefold() == "filter"]["Column Name"].tolist()
    filter_col = filter_cols[0] if filter_cols else None

    sf_cols = get_columns(sf_conn, table, dbtype="snowflake")
    vt_cols = get_columns(vt_conn, table, dbtype="vertica")

    sf_norm_map = {col.casefold(): col for col in sf_cols}
    vt_norm_map = {col.casefold(): col for col in vt_cols}
    common_norm = set(sf_norm_map.keys()) & set(vt_norm_map.keys())
    common_cols = [sf_norm_map[n] for n in common_norm if n in sf_norm_map and n in vt_norm_map]

    keys = resolve_columns(key_cols, common_cols)
    excludes = resolve_columns(exclude_cols, common_cols) if exclude_cols else []
    filters = resolve_columns(filter_cols, common_cols) if filter_cols else []

    compare_cols = [col for col in common_cols if col not in keys + excludes]

    query = build_outer_join_query(table, compare_cols, keys, filter_col=filter_col)

    with sf_conn.cursor() as sf_cursor:
        sf_cursor.execute(query)
        sf_df = pd.DataFrame(sf_cursor.fetchall(), columns=[desc[0] for desc in sf_cursor.description])

    with vt_conn.cursor() as vt_cursor:
        vt_cursor.execute(query)
        vt_df = pd.DataFrame(vt_cursor.fetchall(), columns=[desc[0] for desc in vt_cursor.description])

    merged = sf_df.merge(vt_df, how='outer', on=keys)
    mismatches = compare_rows(merged, compare_cols, keys, table)

    if mismatches:
        df = pd.DataFrame(mismatches)
        df = df[["TableName", "ColumnName", "ValueInVertica", "ValueInSnowflake", "Key"]]
        if first_write:
            df.to_excel(output_path, index=False, engine='openpyxl')
            first_write = False
        else:
            book = load_workbook(output_path)
            with pd.ExcelWriter(output_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
                writer.book = book
                writer.sheets = {ws.title: ws for ws in book.worksheets}
                start_row = writer.sheets['Sheet1'].max_row
                df.to_excel(writer, index=False, header=False, startrow=start_row)
        summary.append(f"{table}: Mismatches found and written")
    else:
        summary.append(f"{table}: No mismatches")

    return first_write




def main():
    config = pd.read_excel("test.xlsx")
    required_cols = {"Table Name", "Flag", "Column Name"}
    if not required_cols.issubset(config.columns):
        raise ValueError("Excel file must have columns: Table Name, Flag, Column Name")

    tables = config["Table Name"].dropna().unique()
    sf_conn = connect_to_snowflake()
    vt_conn = connect_to_vertica()
    summary = []
    output_path = "comparison_report.xlsx"

    # Remove old file if exists
    if os.path.exists(output_path):
        os.remove(output_path)

    first_write = True

    try:
        for table in tables:
            first_write = compare_table(table, config, sf_conn, vt_conn, summary, output_path, first_write)
    finally:
        sf_conn.close()
        vt_conn.close()

    print("\n=== Summary ===")
    for line in summary:
        print(line)

    if os.path.exists(output_path):
        print("\nMismatch report saved to comparison_report.xlsx")
    else:
        print("\nNo mismatches found.")
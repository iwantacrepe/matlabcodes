import os
import pandas as pd
import snowflake.connector
import vertica_python
from dotenv import load_dotenv
from datetime import datetime
# import time
# import psutil
# import threading
# import statistics

# Load environment variables from a .env file for local development
load_dotenv()

# --- Configuration from Environment Variables ---
# All sensitive credentials and environment-specific details are now loaded from the environment.
# Create a .env file in your project root for local testing, e.g., VERTICA_HOST=your_vertica_host
VERTICA_HOST = os.getenv("VERTICA_HOST")
VERTICA_USER = os.getenv("VERTICA_USER")
VERTICA_PASSWORD = os.getenv("VERTICA_PASSWORD")
VERTICA_DB = os.getenv("VERTICA_DB")
# VERTICA_HOST_DEV = os.getenv("VERTICA_HOST_DEV")
# VERTICA_USER_DEV = os.getenv("VERTICA_USER_DEV")
# VERTICA_PASSWORD_DEV = os.getenv("VERTICA_PASSWORD_DEV")
# VERTICA_DB_DEV = os.getenv("VERTICA_DB_DEV")
URL_SF = os.getenv("URL_SF")
KEYTAB_FILE_SDL_SF = os.getenv("KEYTAB_FILE_SDL_SF")
PASSWORD_SDL_SF = os.getenv("PASSWORD_SDL_SF")
DB_SDL_SF = os.getenv("DB_SDL_SF")
DB_SDL_SF_VW = os.getenv("DB_SDL_SF_VW")
SCHEMA_SDL_SF = os.getenv("SCHEMA_SDL_SF")
USER_SDL_SF = os.getenv("USER_SDL_SF")
WAREHOUSE_SDL_SF = os.getenv("WAREHOUSE_SDL_SF")
ROLE_SDL_SF = os.getenv("ROLE_SDL_SF")
KEYTAB_DIR = os.getenv("KEYTAB_DIR")
DATA_DIR_VAR = os.getenv("DATA_DIR_VAR")
SNOWFLAKE_JWT = "SNOWFLAKE_JWT"
FILE_NAME = "table.xlsx"
XLS_PATH_TABLE = os.path.join(DATA_DIR_VAR, FILE_NAME)

pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
pd.set_option("display.width", None)
pd.set_option("display.max_colwidth", None)

SCHEMA = "ER1"
START_DATETIME = "2020-10-01 00:00:00"
BATCH_SIZE = 100000

DEFAULT_EXCLUDE_COLS = ["INSRT_TS", "UPDT_TS", "ETL_TRNS", "ETL_JOB", "INSRT_TR", "INSRT_JB", "CREATION_DATE_TIME", "UPDT_TR", "UPDT_JB", "LAST_UPDATED_DATE"]

def connect_to_snowflake():
    """Establishes a connection to Snowflake."""
    return snowflake.connector.connect(
        account=URL_SF.split("//")[-1].split(".snowflakecomputing.com")[0],
        user=USER_SDL_SF,
        private_key_file=os.path.join(KEYTAB_DIR, KEYTAB_FILE_SDL_SF),
        private_key_file_pwd=PASSWORD_SDL_SF,
        database=DB_SDL_SF,
        schema=SCHEMA_SDL_SF,
        warehouse=WAREHOUSE_SDL_SF,
        role=ROLE_SDL_SF,
        authenticator=SNOWFLAKE_JWT
    )

def connect_to_vertica():
    """Establishes a connection to production Vertica."""
    return vertica_python.connect(
        host=VERTICA_HOST,
        port=5433,
        user=VERTICA_USER,
        password=VERTICA_PASSWORD,
        database=VERTICA_DB,
        autocommit=True
    )

# --- PROD STUFF COMMENTED OUT ---
# No longer connecting to a separate dev database to log mismatches.
# def connect_to_vertica_dev():
#     """Establishes a connection to development Vertica for logging mismatches."""
#     return vertica_python.connect(
#         host=VERTICA_HOST_DEV,
#         port=5433,
#         user=VERTICA_USER_DEV,
#         password=VERTICA_PASSWORD_DEV,
#         database=VERTICA_DB_DEV,
#         autocommit=True
#     )

def get_columns(conn, table, dbtype="snowflake"):
    """Fetches column names for a given table from the database's information schema."""
    if dbtype == "snowflake":
        with conn.cursor() as cur:
            cur.execute("""
                SELECT column_name
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE table_schema = %s AND table_name = %s
                ORDER BY ordinal_position
            """, (SCHEMA, table))
            return [r[0] for r in cur.fetchall()]
    else:  # vertica
        with conn.cursor() as cur:
            cur.execute("""
                SELECT column_name
                FROM v_catalog.columns
                WHERE table_schema = %s AND table_name = %s
                ORDER BY ordinal_position
            """, (SCHEMA, table))
            cols = [r[0] for r in cur.fetchall()]
            cur.close()
            return cols

# --- NEW FUNCTION ---
def get_row_count(conn, table, schema, filter_col=None, start_datetime=None):
    """Gets the total row count for a table, applying an optional filter."""
    query = f'SELECT COUNT(*) FROM "{schema}"."{table}"'
    params = ()
    if filter_col and start_datetime:
        query += f' WHERE "{filter_col}" >= %s'
        params = (start_datetime,)
    
    with conn.cursor() as cur:
        cur.execute(query, params)
        return cur.fetchone()[0]

def resolve_columns(requested, actual, force_upper=False):
    """Resolves requested column names against a list of actual column names, case-insensitively."""
    resolved = []
    actual_map = {col.casefold(): col for col in actual}
    for col in requested:
        if col.casefold() not in actual_map:
            raise ValueError(f"Column '{col}' not found in the table's available columns.")
        resolved_name = actual_map[col.casefold()]
        if force_upper:
            resolved_name = resolved_name.upper()
        resolved.append(resolved_name)
    return resolved

def format_value(val):
    """Formats a value for insertion into the results table."""
    return "NULL" if pd.isna(val) else str(val)

def is_empty(val):
    """Checks if a value is null, NaN, or an empty string."""
    return pd.isna(val) or str(val).strip() == ""

def compare_rows(df, compare_cols, keys, table):
    """Compares rows in a merged DataFrame and identifies mismatches."""
    mismatches = []
    for _, row in df.iterrows():
        row_keys = ", ".join([
            format_value(row.get(f"{k}_sf")) if not pd.isna(row.get(f"{k}_sf"))
            else format_value(row.get(f"{k}_vt")) for k in keys
        ])

        is_entirely_missing_in_vt = all(is_empty(row.get(f"{col}_vt")) for col in compare_cols) and any(not is_empty(row.get(f"{col}_sf")) for col in compare_cols)
        is_entirely_missing_in_sf = all(is_empty(row.get(f"{col}_sf")) for col in compare_cols) and any(not is_empty(row.get(f"{col}_vt")) for col in compare_cols)
        
        if is_entirely_missing_in_vt:
            mismatches.append({
                "TableName": table,
                "ColumnName": "__KEY_MISSING__",
                "ValueInVertica": "Missing in Vertica",
                "ValueInSnowflake": "Present",
                "Key": row_keys
            })
            continue

        if is_entirely_missing_in_sf:
            mismatches.append({
                "TableName": table,
                "ColumnName": "__KEY_MISSING__",
                "ValueInVertica": "Present",
                "ValueInSnowflake": "Missing in Snowflake",
                "Key": row_keys
            })
            continue

        for col in compare_cols:
            val_sf = row.get(f"{col}_sf")
            val_vt = row.get(f"{col}_vt")

            if pd.isna(val_sf) and pd.isna(val_vt):
                continue

            if pd.isna(val_sf) != pd.isna(val_vt) or (
                not pd.isna(val_sf) and not pd.isna(val_vt) and
                str(val_sf).strip().casefold() != str(val_vt).strip().casefold()
            ):
                mismatches.append({
                    "TableName": table,
                    "ColumnName": col,
                    "ValueInVertica": format_value(val_vt)[:255] if val_vt is not None else "",
                    "ValueInSnowflake": format_value(val_sf)[:255] if val_sf is not None else "",
                    "Key": row_keys
                })

    return mismatches

def compare_table(table, config_df, sf_conn, vt_conn, summary): # Removed vt_dev_conn
    """Main function to compare data for a single table between Snowflake and Vertica."""
    print(f"--- Starting comparison for table: {table} ---")
    sub = config_df[config_df["Table Name"].str.casefold() == table.casefold()]
    if (sub["Flag"].str.casefold() == "stage").any():
        summary.append(f"Table '{table}': Skipped (Flagged as 'stage')")
        print(f"Skipping table '{table}' as it is flagged as 'stage'.")
        return

    key_cols = sub[sub["Flag"].str.casefold() == "key"]["Column Name"].tolist()
    exclude_cols = sub[sub["Flag"].str.casefold() == "exclude"]["Column Name"].tolist()
    filter_cols = sub[sub["Flag"].str.casefold() == "filter"]["Column Name"].tolist()
    filter_col = filter_cols[0] if filter_cols else None
    
    if not key_cols:
        summary.append(f"Table '{table}': Skipped (No key columns defined in config)")
        print(f"Skipping table '{table}' because no key columns were defined.")
        return

    # --- MODIFIED LOGIC: Check for empty tables before proceeding ---
    print(f"[INFO] Checking row counts for table '{table}'...")
    sf_count = get_row_count(sf_conn, table, SCHEMA, filter_col, START_DATETIME)
    vt_count = get_row_count(vt_conn, table, SCHEMA, filter_col, START_DATETIME)
    print(f"[INFO] Snowflake count: {sf_count}, Vertica count: {vt_count}")

    if sf_count == 0 and vt_count == 0:
        summary.append(f"Table '{table}': Skipped (Empty in both Snowflake and Vertica)")
        print(f"Skipping table '{table}' as it's empty in both sources.")
        return
    if sf_count == 0:
        summary.append(f"Table '{table}': Skipped (Empty in Snowflake, has {vt_count} rows in Vertica)")
        print(f"Skipping table '{table}' as it's empty in Snowflake.")
        return
    if vt_count == 0:
        summary.append(f"Table '{table}': Skipped (Empty in Vertica, has {sf_count} rows in Snowflake)")
        print(f"Skipping table '{table}' as it's empty in Vertica.")
        return
        
    sf_cols = get_columns(sf_conn, table, dbtype="snowflake")
    vt_cols = get_columns(vt_conn, table, dbtype="vertica")

    sf_norm_map = {col.casefold(): col for col in sf_cols}
    vt_norm_map = {col.casefold(): col for col in vt_cols}
    common_norm = set(sf_norm_map.keys()) & set(vt_norm_map.keys())
    common_cols = [sf_norm_map[n] for n in common_norm]
    all_cols = list(set(sf_cols + vt_cols))

    keys = resolve_columns(key_cols, all_cols, force_upper=True)
    excludes_from_excel = resolve_columns(exclude_cols, all_cols, force_upper=True) if exclude_cols else []
    final_excludes = list(set(excludes_from_excel) | set(DEFAULT_EXCLUDE_COLS))
    compare_cols = [col for col in common_cols if col.upper() not in keys + final_excludes]
  
    print(f"[DEBUG] Comparing {len(compare_cols)} columns for table '{table}'.")

    def fetch_df_batch(conn, dbtype, limit, offset):
        """Fetches a batch of data from the specified database table."""
        cols_to_fetch = keys + compare_cols
        col_str = ", ".join(f'"{c}"' for c in cols_to_fetch)
        query = f'SELECT {col_str} FROM "{SCHEMA}"."{table}"'
        
        params = ()
        if filter_col:
            query += f' WHERE "{filter_col}" >= %s'
            params = (START_DATETIME,)

        order_by_str = ", ".join(f'"{k}"' for k in keys)
        query += f' ORDER BY {order_by_str}'
        query += f' LIMIT {limit} OFFSET {offset}'

        with conn.cursor() as cur:
            cur.execute(query, params)
            columns = [desc[0].upper() for desc in cur.description] if cur.description else [c.upper() for c in cols_to_fetch]
            return pd.DataFrame(cur.fetchall(), columns=columns)

    offset = 0
    mismatches_found_for_table = False
    while True:
        print(f"[INFO] Fetching batch for table '{table}' with offset {offset}...")
        df_sf = fetch_df_batch(sf_conn, "snowflake", BATCH_SIZE, offset)
        df_vt = fetch_df_batch(vt_conn, "vertica", BATCH_SIZE, offset)

        if df_sf.empty and df_vt.empty:
            print(f"[INFO] No more data to fetch for table '{table}'.")
            break

        df_sf = df_sf.add_suffix("_sf")
        df_vt = df_vt.add_suffix("_vt")

        merged = pd.merge(df_sf, df_vt,
                          left_on=[f"{k}_sf" for k in keys],
                          right_on=[f"{k}_vt" for k in keys],
                          how='outer')

        mismatches = compare_rows(merged, compare_cols, keys, table)

        if mismatches:
            mismatches_found_for_table = True
            print(f"[!!] Found {len(mismatches)} mismatches in this batch. Printing to terminal.")
            
            # --- MODIFIED LOGIC: Print mismatches instead of writing to DB ---
            for m in mismatches:
                print(f"  - MISMATCH IN TABLE: {m['TableName']}")
                print(f"    - UNIQUE KEY: {m['Key']}")
                print(f"    - COLUMN: {m['ColumnName']}")
                print(f"    - SNOWFLAKE VALUE: {m['ValueInSnowflake']}")
                print(f"    - VERTICA VALUE: {m['ValueInVertica']}")
                print("-" * 20)

            # --- PROD STUFF COMMENTED OUT ---
            # data_to_insert = [
            #     (m['TableName'], m['ColumnName'], m['ValueInVertica'], m['ValueInSnowflake'], m['Key'])
            #     for m in mismatches
            # ]
            # insert_query = """
            #     INSERT INTO ER1.vertica_snowflake_table_data_comparison
            #     (table_name, column_name, value_in_vertica, value_in_snowflake, unique_key)
            #     VALUES (%s, %s, %s, %s, %s)
            # """
            # with vt_dev_conn.cursor() as cur:
            #     cur.executemany(insert_query, data_to_insert)

        offset += BATCH_SIZE

    if mismatches_found_for_table:
        summary.append(f"Table '{table}': Mismatches found and printed to the terminal.")
    else:
        summary.append(f"Table '{table}': No mismatches found.")
    print(f"--- Finished comparison for table: {table} ---\n")

def main():
    """Main execution function."""
    try:
        config = pd.read_excel(XLS_PATH_TABLE)
        required_cols = {"Table Name", "Flag", "Column Name"}
        if not required_cols.issubset(config.columns):
            raise ValueError("Excel config file must have columns: 'Table Name', 'Flag', 'Column Name'")
    except FileNotFoundError:
        print(f"Error: The configuration file '{XLS_PATH_TABLE}' was not found.")
        return
    except Exception as e:
        print(f"Error reading Excel file: {e}")
        return

    tables_to_compare = config["Table Name"].dropna().unique()

    sf_conn = None
    vt_conn = None
    # vt_dev_conn = None # No longer needed

    summary = []

    try:
        print("Establishing database connections...")
        sf_conn = connect_to_snowflake()
        vt_conn = connect_to_vertica()
        # vt_dev_conn = connect_to_vertica_dev() # No longer needed
        print("Connections established successfully.")
        
        # --- PROD STUFF COMMENTED OUT ---
        # No longer truncating the remote table
        # with vt_dev_conn.cursor() as cur:
        #     print("Truncating destination table: ER1.vertica_snowflake_table_data_comparison")
        #     cur.execute("TRUNCATE TABLE ER1.vertica_snowflake_table_data_comparison")
        #     print("[DEBUG] Truncation finished.")

        for table in tables_to_compare:
            # Pass one fewer connection argument
            compare_table(table, config, sf_conn, vt_conn, summary)

    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")
    finally:
        print("Closing database connections.")
        if sf_conn:
            sf_conn.close()
        if vt_conn:
            vt_conn.close()
        # if vt_dev_conn:
        #     vt_dev_conn.close()

    print("\n" + "="*15 + " Summary " + "="*15)
    mismatches_found_overall = False
    for line in summary:
        print(line)
        if "Mismatches found" in line:
            mismatches_found_overall = True
    print("="*39)

    if mismatches_found_overall:
        print("\nMismatch report has been printed to the terminal above.")
    else:
        print("\nNo mismatches were found across any of the compared tables.")
    
    return "success"

if __name__ == "__main__":
    main()
    
# --- PROD STUFF COMMENTED OUT ---
# The performance monitoring code below is commented out but kept for reference.
# if __name__ == "__main__":
#     process = psutil.Process(os.getpid())
    
#     cpu_percentages = []
#     memory_usages = []
#     monitoring = True

#     def monitor_resources():
#         """Monitors CPU and memory usage of the current process."""
#         while monitoring:
#             try:
#                 cpu_percentages.append(psutil.cpu_percent(interval=0.1))
#                 memory_usages.append(process.memory_info().rss / 1024 / 1024) # in MB
#             except psutil.NoSuchProcess:
#                 break
#             time.sleep(1)
    
#     monitor_thread = threading.Thread(target=monitor_resources, daemon=True)
#     monitor_thread.start()
    
#     start_time = time.time()
    
#     main()
    
#     monitoring = False
#     monitor_thread.join(timeout=2.0)
    
#     end_time = time.time()
#     execution_time = end_time - start_time
    
#     print("\n" + "="*15 + " Performance Report " + "="*15)
#     print(f"Total Execution Time: {execution_time:.2f} seconds")

#     if cpu_percentages:
#         print(f"CPU Usage (%):")
#         print(f"  - Average: {statistics.mean(cpu_percentages):.2f}%")
#         print(f"  - Maximum: {max(cpu_percentages):.2f}%")
    
#     if memory_usages:
#         print(f"Memory Usage (MB):")
#         print(f"  - Average: {statistics.mean(memory_usages):.2f} MB")
#         print(f"  - Maximum: {max(memory_usages):.2f} MB")
#         print(f"  - Final: {memory_usages[-1]:.2f} MB" if memory_usages else "N/A")
#     print("="*48)

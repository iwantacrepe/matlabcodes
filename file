#include <vector>
#include <algorithm>
using namespace std;

int calculateLowestPrice(int N, int M, vector<vector<int>>& droneRoutes, int src, int dest, int k) {
    const long long INF = 1e18; // A larger INF for long long
    vector<long long> prev(N, INF), curr(N, INF);
    prev[src] = 0;

    // The loop runs k+1 times, for paths of length 0 to k+1 edges
    for (int i = 0; i <= k; ++i) {
        curr = prev;
        for (auto& route : droneRoutes) {
            int u = route[0];
            int v = route[1];
            int w = route[2];
            if (prev[u] < INF) {
                curr[v] = min(curr[v], prev[u] + w);
            }
        }
        prev = curr; // Use simple assignment, swap is fine too.
    }

    return prev[dest] == INF ? -1 : prev[dest];
}

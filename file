def compare_rows(df, compare_cols, keys, table):
    mismatches = []
    for _, row in df.iterrows():
        row_keys = ", ".join([
            format_value(row.get(f"{k}_sf")) if not pd.isna(row.get(f"{k}_sf"))
            else format_value(row.get(f"{k}_vt")) for k in keys
        ])

        is_entirely_missing_in_vt = all(pd.isna(row.get(f"{col}_vt")) for col in compare_cols) and any(not pd.isna(row.get(f"{col}_sf")) for col in compare_cols)
        is_entirely_missing_in_sf = all(pd.isna(row.get(f"{col}_sf")) for col in compare_cols) and any(not pd.isna(row.get(f"{col}_vt")) for col in compare_cols)

        if is_entirely_missing_in_vt:
            mismatches.append({
                "TableName": table,
                "ColumnName": "__KEY_MISSING__",
                "ValueInVertica": "Missing in Vertica",
                "ValueInSnowflake": "Present",
                "Key": row_keys
            })
            continue

        if is_entirely_missing_in_sf:
            mismatches.append({
                "TableName": table,
                "ColumnName": "__KEY_MISSING__",
                "ValueInVertica": "Present",
                "ValueInSnowflake": "Missing in Snowflake",
                "Key": row_keys
            })
            continue

        for col in compare_cols:
            val_sf = row.get(f"{col}_sf")
            val_vt = row.get(f"{col}_vt")

            if pd.isna(val_sf) and pd.isna(val_vt):
                continue

            if (
                not pd.isna(val_sf) and not pd.isna(val_vt) and
                str(val_sf).strip().casefold() != str(val_vt).strip().casefold()
            ):
                mismatches.append({
                    "TableName": table,
                    "ColumnName": col,
                    "ValueInVertica": str(val_vt),
                    "ValueInSnowflake": str(val_sf),
                    "Key": row_keys
                })

    return mismatches
#include <vector>
#include <queue>
#include <tuple>
#include <climits>
#include <algorithm>
using namespace std;

int calculateLowestPrice(int N, int M, vector<vector<int>>& droneRoutes, int src, int dest, int k) {
    vector<vector<pair<int,int>>> adj(N);
    for (auto& r : droneRoutes)
        adj[r[0]].emplace_back(r[1], r[2]);

    vector<vector<int>> dist(N, vector<int>(k + 2, INT_MAX));
    using State = tuple<int,int,int>;
    priority_queue<State, vector<State>, greater<State>> pq;

    dist[src][0] = 0;
    pq.emplace(0, src, 0);

    while (!pq.empty()) {
        auto [cost,u,used] = pq.top();
        pq.pop();
        if (cost > dist[u][used] || used == k+1)
            continue;
        for (auto& [v,w] : adj[u]) {
            int nc = cost + w, ne = used + 1;
            if (nc < dist[v][ne]) {
                dist[v][ne] = nc;
                pq.emplace(nc, v, ne);
            }
        }
    }

    int best = INT_MAX;
    for (int e = 1; e <= k+1; ++e)
        best = min(best, dist[dest][e]);

    return best == INT_MAX ? -1 : best;
}
import snowflake.connector
import vertica_python
import os
import pandas as pd
from dotenv import load_dotenv

pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
pd.set_option("display.width", None)
pd.set_option("display.max_colwidth", None)

load_dotenv()

def connect_to_snowflake():
    conn = snowflake.connector.connect(
        account=os.getenv("URL_SF").split("//")[-1].split(".snowflakecomputing.com")[0],
        user=os.getenv("USER_SDL_SF"),
        private_key_file=os.path.join(os.getenv("DATA_ROOT"), os.getenv("KEYTAB_FILE_SDL_SF")),
        private_key_file_pwd=os.getenv("PASSWORD_SDL_SF"),
        database=os.getenv("DB_SDL_SF"),
        schema=os.getenv("SCHEMA_SDL_SF"),
        warehouse=os.getenv("WAREHOUSE_SDL_SF"),
        role=os.getenv("ROLE_SDL_SF"),
        authenticator='SNOWFLAKE_JWT'
    )
    return conn

def connect_to_vertica():
    return vertica_python.connect(
        host=os.getenv("VERTICA_HOST"),
        port=5433,
        user=os.getenv("VERTICA_USER"),
        password=os.getenv("VERTICA_PASSWORD"),
        database=os.getenv("VERTICA_DB"),
        autocommit=True
    )

def get_snowflake_tables(conn, schema_name):
    with conn.cursor() as cursor:
        cursor.execute(f"""
            SELECT TABLE_NAME 
            FROM INFORMATION_SCHEMA.TABLES
            WHERE TABLE_SCHEMA = '{schema_name}'
        """)
        return [row[0] for row in cursor.fetchall()]

def get_vertica_tables(conn, schema_name):
    cursor = conn.cursor()
    cursor.execute(f"""
        SELECT table_name
        FROM v_catalog.tables
        WHERE table_schema = '{schema_name}' 
    """)
    tables = [row[0] for row in cursor.fetchall()]
    cursor.close()
    return tables

def get_snowflake_columns(conn, table_name, schema_name):
    with conn.cursor() as cursor:
        cursor.execute(f"""
            SELECT COLUMN_NAME       
            FROM INFORMATION_SCHEMA.COLUMNS      
            WHERE TABLE_NAME = '{table_name}'      
            AND TABLE_SCHEMA = '{schema_name}'      
        """)
        return [row[0] for row in cursor.fetchall()]

def get_vertica_columns(conn, table_name, schema_name):
    cursor = conn.cursor()
    cursor.execute(f"""
        SELECT column_name
        FROM v_catalog.columns
        WHERE table_schema = '{schema_name}' AND table_name = '{table_name.lower()}'
    """)
    columns = [row[0] for row in cursor.fetchall()]
    cursor.close()
    return columns

def main():
    schema_name = "ER1"
    sf_conn = connect_to_snowflake()
    vt_conn = connect_to_vertica()

    result_rows = []

    try:
        sf_tables = get_snowflake_tables(sf_conn, schema_name)
        vt_tables = get_vertica_tables(vt_conn, schema_name)

        common_tables = set(map(str.lower, sf_tables)).intersection(set(map(str.lower, vt_tables)))

        for table in sorted(common_tables):
            sf_cols = get_snowflake_columns(sf_conn, table.upper(), schema_name)
            vt_cols = get_vertica_columns(vt_conn, table, schema_name)

            all_columns = set(map(str.lower, sf_cols)).union(set(map(str.lower, vt_cols)))

            for col in all_columns:
                result_rows.append({
                    "Table_Name": table.upper(),
                    "Column_Name": col,
                    "PresentInVertica": 'Y' if col in map(str.lower, vt_cols) else 'N',
                    "PresentInSnowflake": 'Y' if col in map(str.lower, sf_cols) else 'N',
                })

        df = pd.DataFrame(result_rows)
        df.to_excel("column_comparison_report.xlsx", index=False)
        print("\nReport saved as column_comparison_report.xlsx")

    finally:
        sf_conn.close()
        vt_conn.close()

if __name__ == "__main__":
    main()
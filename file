import os
import sys
import pandas as pd
import snowflake.connector
import vertica_python
from dotenv import load_dotenv

#–– Configuration ––#
load_dotenv()
SCHEMA = os.getenv("ER1_SCHEMA", "ER1")  # or set in your .env as ER1_SCHEMA

#–– Helpers ––#
def normalize(name: str) -> str:
    """Normalize identifiers for case-insensitive comparison."""
    return name.casefold()

def compare_sets(a, b):
    """Return only_in_a, only_in_b, and common (all normalized)."""
    set_a = set(a)
    set_b = set(b)
    return sorted(set_a - set_b), sorted(set_b - set_a), sorted(set_a & set_b)

#–– Connection Functions ––#
def connect_to_snowflake():
    print("Connecting to Snowflake…")
    conn = snowflake.connector.connect(
        account     = os.getenv("URL_SF").split("//")[-1].split(".snowflakecomputing.com")[0],
        user        = os.getenv("USER_SDL_SF"),
        private_key_file     = os.path.join(os.getenv("DATA_ROOT"), os.getenv("KEYTAB_FILE_SDL_SF")),
        private_key_file_pwd = os.getenv("PASSWORD_SDL_SF"),
        database    = os.getenv("DB_SDL_SF"),
        schema      = os.getenv("SCHEMA_SDL_SF"),
        warehouse   = os.getenv("WAREHOUSE_SDL_SF"),
        role        = os.getenv("ROLE_SDL_SF"),
        authenticator = 'SNOWFLAKE_JWT'
    )
    print("Snowflake connected.")
    return conn

def connect_to_vertica():
    print("Connecting to Vertica…")
    conn = vertica_python.connect(
        host       = os.getenv("VERTICA_HOST"),
        port       = int(os.getenv("VERTICA_PORT", 5433)),
        user       = os.getenv("VERTICA_USER"),
        password   = os.getenv("VERTICA_PASSWORD"),
        database   = os.getenv("VERTICA_DB"),
        autocommit = True
    )
    print("Vertica connected.")
    return conn

#–– Retrieval Functions ––#
def get_snowflake_tables(conn, schema_name):
    with conn.cursor() as cur:
        cur.execute(f"""
            SELECT table_name
            FROM INFORMATION_SCHEMA.TABLES
            WHERE table_schema = %s
        """, (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_vertica_tables(conn, schema_name):
    cur = conn.cursor()
    cur.execute(f"""
        SELECT table_name
        FROM v_catalog.tables
        WHERE table_schema = %s
    """, (schema_name,))
    tables = [row[0] for row in cur.fetchall()]
    cur.close()
    return tables

def get_snowflake_columns(conn, table_name, schema_name):
    with conn.cursor() as cur:
        cur.execute(f"""
            SELECT column_name
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_schema = %s
              AND table_name   = %s
        """, (schema_name, table_name))
        return [row[0] for row in cur.fetchall()]

def get_vertica_columns(conn, table_name, schema_name):
    cur = conn.cursor()
    # Match table name case-insensitively in Vertica
    cur.execute(f"""
        SELECT column_name
        FROM v_catalog.columns
        WHERE table_schema = %s
          AND UPPER(table_name) = UPPER(%s)
    """, (schema_name, table_name))
    cols = [row[0] for row in cur.fetchall()]
    cur.close()
    return cols

#–– Main Comparison Logic ––#
def main():
    sf_conn = connect_to_snowflake()
    vt_conn = connect_to_vertica()

    try:
        # Fetch table lists
        sf_tables = get_snowflake_tables(sf_conn, SCHEMA)
        vt_tables = get_vertica_tables(vt_conn, SCHEMA)

        # Normalize for comparison
        sf_norm = [normalize(t) for t in sf_tables]
        vt_norm = [normalize(t) for t in vt_tables]

        # Compare tables
        only_sf, only_vt, common = compare_sets(sf_norm, vt_norm)

        print("\n=== TABLE COMPARISON ===")
        print(f"Snowflake ({len(sf_tables)}): {', '.join(sf_tables)}")
        print(f"Vertica   ({len(vt_tables)}): {', '.join(vt_tables)}")
        print(f"Only in Snowflake ({len(only_sf)}): {only_sf}")
        print(f"Only in Vertica   ({len(only_vt)}): {only_vt}")
        print(f"In both ({len(common)}): {common}")

        # Column-level comparisons for each common table
        column_results = []
        for norm_name in common:
            # find original-cased table names
            sf_table = next(t for t in sf_tables if normalize(t) == norm_name)
            vt_table = next(t for t in vt_tables if normalize(t) == norm_name)

            sf_cols = get_snowflake_columns(sf_conn, sf_table, SCHEMA)
            vt_cols = get_vertica_columns(vt_conn, vt_table, SCHEMA)

            sf_norm_cols = [normalize(c) for c in sf_cols]
            vt_norm_cols = [normalize(c) for c in vt_cols]

            only_sf_c, only_vt_c, common_cols = compare_sets(sf_norm_cols, vt_norm_cols)

            column_results.append({
                "table": sf_table,
                "sf_count": len(sf_cols),
                "vt_count": len(vt_cols),
                "only_sf": only_sf_c,
                "only_vt": only_vt_c,
                "common": common_cols
            })

            print(f"\n-- Columns for {sf_table} --")
            print(f"Snowflake ({len(sf_cols)}): {sf_cols}")
            print(f"Vertica   ({len(vt_cols)}): {vt_cols}")
            print(f"Only in SF: {only_sf_c}")
            print(f"Only in VT: {only_vt_c}")

        # Optionally: summarize across tables in a DataFrame
        df = pd.DataFrame([{
            "Table": r["table"],
            "SF cols": r["sf_count"],
            "VT cols": r["vt_count"],
            "# Only SF": len(r["only_sf"]),
            "# Only VT": len(r["only_vt"])
        } for r in column_results])
        print("\n=== SUMMARY ACROSS TABLES ===")
        print(df.to_string(index=False))

    finally:
        sf_conn.close()
        vt_conn.close()
        print("\nConnections closed.")

if __name__ == "__main__":
    main()
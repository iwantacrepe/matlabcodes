import os
import pandas as pd
import snowflake.connector
import vertica_python
from dotenv import load_dotenv

#–– Load environment ––#
load_dotenv()
SCHEMA = os.getenv("ER1_SCHEMA", "ER1")

def normalize(name: str) -> str:
    return name.casefold()

def connect_to_snowflake():
    print("Connecting to Snowflake…")
    conn = snowflake.connector.connect(
        account     = os.getenv("URL_SF").split("//")[-1].split(".snowflakecomputing.com")[0],
        user        = os.getenv("USER_SDL_SF"),
        private_key_file     = os.path.join(os.getenv("DATA_ROOT"), os.getenv("KEYTAB_FILE_SDL_SF")),
        private_key_file_pwd = os.getenv("PASSWORD_SDL_SF"),
        database    = os.getenv("DB_SDL_SF"),
        schema      = os.getenv("SCHEMA_SDL_SF"),
        warehouse   = os.getenv("WAREHOUSE_SDL_SF"),
        role        = os.getenv("ROLE_SDL_SF"),
        authenticator = 'SNOWFLAKE_JWT'
    )
    print("Snowflake connected.")
    return conn

def connect_to_vertica():
    print("Connecting to Vertica…")
    conn = vertica_python.connect(
        host       = os.getenv("VERTICA_HOST"),
        port       = int(os.getenv("VERTICA_PORT", 5433)),
        user       = os.getenv("VERTICA_USER"),
        password   = os.getenv("VERTICA_PASSWORD"),
        database   = os.getenv("VERTICA_DB"),
        autocommit = True
    )
    print("Vertica connected.")
    return conn

def get_snowflake_tables(conn, schema_name):
    with conn.cursor() as cur:
        cur.execute(f"""
            SELECT table_name
            FROM INFORMATION_SCHEMA.TABLES
            WHERE table_schema = %s
        """, (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_vertica_tables(conn, schema_name):
    cur = conn.cursor()
    cur.execute(f"""
        SELECT table_name
        FROM v_catalog.tables
        WHERE table_schema = %s
    """, (schema_name,))
    tables = [row[0] for row in cur.fetchall()]
    cur.close()
    return tables

def get_snowflake_columns(conn, table_name, schema_name):
    with conn.cursor() as cur:
        cur.execute(f"""
            SELECT column_name
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_schema = %s
              AND table_name   = %s
        """, (schema_name, table_name))
        return [row[0] for row in cur.fetchall()]

def get_vertica_columns(conn, table_name, schema_name):
    cur = conn.cursor()
    cur.execute(f"""
        SELECT column_name
        FROM v_catalog.columns
        WHERE table_schema = %s
          AND UPPER(table_name) = UPPER(%s)
    """, (schema_name, table_name))
    cols = [row[0] for row in cur.fetchall()]
    cur.close()
    return cols

def main():
    sf_conn = connect_to_snowflake()
    vt_conn = connect_to_vertica()

    try:
        sf_tables = get_snowflake_tables(sf_conn, SCHEMA)
        vt_tables = get_vertica_tables(vt_conn, SCHEMA)

        # Normalize
        sf_norm = [normalize(t) for t in sf_tables]
        vt_norm = [normalize(t) for t in vt_tables]
        common_tables = sorted(set(sf_norm).intersection(set(vt_norm)))

        results = []
        for norm_table in common_tables:
            sf_table = next(t for t in sf_tables if normalize(t) == norm_table)
            vt_table = next(t for t in vt_tables if normalize(t) == norm_table)

            sf_cols = get_snowflake_columns(sf_conn, sf_table, SCHEMA)
            vt_cols = get_vertica_columns(vt_conn, vt_table, SCHEMA)

            sf_col_map = {normalize(col): col for col in sf_cols}
            vt_col_map = {normalize(col): col for col in vt_cols}

            all_cols = sorted(set(sf_col_map.keys()).union(set(vt_col_map.keys())))

            for col_norm in all_cols:
                results.append({
                    "TableName": sf_table,
                    "ColumnName": sf_col_map.get(col_norm, vt_col_map.get(col_norm)),  # pick any actual case
                    "PresentInVertica": "Y" if col_norm in vt_col_map else "N",
                    "PresentInSnowflake": "Y" if col_norm in sf_col_map else "N"
                })

        final_df = pd.DataFrame(results)
        print("\n=== COLUMN PRESENCE COMPARISON ===")
        print(final_df.to_string(index=False))

        # Optional: Save to CSV or Excel
        # final_df.to_csv("column_comparison_output.csv", index=False)
        # final_df.to_excel("column_comparison_output.xlsx", index=False)

    finally:
        sf_conn.close()
        vt_conn.close()
        print("\nConnections closed.")

if __name__ == "__main__":
    main()
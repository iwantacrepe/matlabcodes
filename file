import os
import pandas as pd
import snowflake.connector
import vertica_python
from dotenv import load_dotenv

# --- Configuration & Setup ---
pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
pd.set_option("display.width", None)
pd.set_option("display.max_colwidth", None)

load_dotenv()
SCHEMA = os.getenv("ER1_SCHEMA", "ER1")
OUTPUT_FILE = "view_datatype_comparison.xlsx"

# --- Helper Functions ---
def normalize(name: str) -> str:
    """
    Returns a case-insensitive and simplified version of a string.
    Useful for comparing data types like 'VARCHAR(50)' and 'varchar'.
    """
    if not isinstance(name, str):
        return str(name)
    return name.casefold().split('(')[0].strip()

# --- Connection Functions (Reused from your script) ---
def connect_to_snowflake():
    """Establishes a connection to the source Snowflake database."""
    print("Connecting to source Snowflake...")
    try:
        conn = snowflake.connector.connect(
            account=os.getenv("URL_SF").split("//")[-1].split(".snowflakecomputing.com")[0],
            user=os.getenv("USER_SDL_SF"),
            private_key_file=os.path.join(os.getenv("DATA_ROOT"), os.getenv("KEYTAB_FILE_SDL_SF")),
            private_key_file_pwd=os.getenv("PASSWORD_SDL_SF"),
            database=os.getenv("DB_SDL_SF_VW"),
            schema=os.getenv("SCHEMA_SDL_SF"),
            warehouse=os.getenv("WAREHOUSE_SDL_SF"),
            role=os.getenv("ROLE_SDL_SF"),
            authenticator='SNOWFLAKE_JWT'
        )
        print("✅ Source Snowflake connected.")
        return conn
    except Exception as e:
        print(f"❌ Error connecting to source Snowflake: {e}")
        raise

def connect_to_vertica():
    """Establishes a connection to the source Vertica database."""
    print("Connecting to source Vertica...")
    try:
        conn = vertica_python.connect(
            host=os.getenv("VERTICA_HOST"),
            port=int(os.getenv("VERTICA_PORT", 5433)),
            user=os.getenv("VERTICA_USER"),
            password=os.getenv("VERTICA_PASSWORD"),
            database=os.getenv("VERTICA_DB"),
            autocommit=True
        )
        print("✅ Source Vertica connected.")
        return conn
    except Exception as e:
        print(f"❌ Error connecting to source Vertica: {e}")
        raise

# --- Metadata Fetching Functions (Modified for Data Types) ---
def get_snowflake_views(conn, schema_name):
    """Fetches view names from Snowflake."""
    with conn.cursor() as cur:
        cur.execute("SELECT table_name FROM INFORMATION_SCHEMA.VIEWS WHERE table_schema = %s", (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_vertica_views(conn, schema_name):
    """Fetches view names from Vertica."""
    with conn.cursor() as cur:
        cur.execute("SELECT table_name FROM v_catalog.views WHERE table_schema = %s", (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_snowflake_view_metadata(conn, schema_name, view_name):
    """Fetches column names and data types for a given view from Snowflake."""
    query = """
        SELECT column_name, data_type
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE table_schema = %s AND table_name = %s
        ORDER BY ordinal_position;
    """
    with conn.cursor() as cur:
        cur.execute(query, (schema_name, view_name))
        # Returns a map of {normalized_col_name: (OriginalColName, OriginalDataType)}
        return {col.casefold(): (col, dtype) for col, dtype in cur.fetchall()}

def get_vertica_view_metadata(conn, schema_name, view_name):
    """Fetches column names and data types for a given view from Vertica."""
    query = """
        SELECT column_name, data_type
        FROM v_catalog.view_columns
        WHERE table_schema = %s AND table_name = %s
        ORDER BY ordinal_position;
    """
    with conn.cursor() as cur:
        cur.execute(query, (schema_name, view_name))
        # Returns a map of {normalized_col_name: (OriginalColName, OriginalDataType)}
        return {col.casefold(): (col, dtype) for col, dtype in cur.fetchall()}

def main():
    sf_conn = None
    vt_conn = None
    comparison_results = []

    try:
        # Establish database connections
        sf_conn = connect_to_snowflake()
        vt_conn = connect_to_vertica()

        # Fetch view lists and find common views
        sf_views = get_snowflake_views(sf_conn, SCHEMA)
        vt_views = get_vertica_views(vt_conn, SCHEMA)

        sf_view_map = {v.casefold(): v for v in sf_views}
        vt_view_map = {v.casefold(): v for v in vt_views}

        common_views_norm = sorted(set(sf_view_map.keys()).intersection(vt_view_map.keys()))

        print(f"\nFound {len(common_views_norm)} common views. Starting column data type comparison...")

        # --- Iterate through common views and compare column data types ---
        for i, norm_view in enumerate(common_views_norm):
            sf_view_name = sf_view_map[norm_view]
            vt_view_name = vt_view_map[norm_view]

            print(f"  ({i+1}/{len(common_views_norm)}) Comparing view: {sf_view_name}")

            # Fetch metadata (column names and data types)
            sf_cols_meta = get_snowflake_view_metadata(sf_conn, SCHEMA, sf_view_name)
            vt_cols_meta = get_vertica_view_metadata(vt_conn, SCHEMA, vt_view_name)

            # Get a superset of all unique column names from both views
            all_columns_norm = sorted(set(sf_cols_meta.keys()) | set(vt_cols_meta.keys()))

            for norm_col in all_columns_norm:
                sf_meta = sf_cols_meta.get(norm_col)
                vt_meta = vt_cols_meta.get(norm_col)

                # Extract details, using 'N/A' for missing elements
                col_name = sf_meta[0] if sf_meta else vt_meta[0]
                sf_dtype = sf_meta[1] if sf_meta else 'N/A'
                vt_dtype = vt_meta[1] if vt_meta else 'N/A'

                # Compare normalized data types
                is_different = 0 if normalize(sf_dtype) == normalize(vt_dtype) else 1

                comparison_results.append({
                    "ViewName": sf_view_name,
                    "ColumnName": col_name,
                    "DataTypeInVertica": vt_dtype,
                    "DataTypeInSnowflake": sf_dtype,
                    "IsDifferent": is_different
                })

        # --- Process and Export Results ---
        if not comparison_results:
            print("\n✅ COMPARISON COMPLETE: No common views found or views have no columns.")
            return

        final_df = pd.DataFrame(comparison_results)

        print("\n=== COMPARISON COMPLETE ===")
        print("Sample of results:")
        print(final_df.head().to_string(index=False))

        # Export DataFrame to Excel
        print(f"\nWriting {len(final_df)} records to {OUTPUT_FILE}...")
        final_df.to_excel(OUTPUT_FILE, index=False, engine='openpyxl')
        print(f"✅ Successfully created Excel file: {os.path.abspath(OUTPUT_FILE)}")

    except Exception as e:
        print(f"\n❌ An unexpected error occurred: {e}")
    finally:
        # Close all connections
        if sf_conn: sf_conn.close()
        if vt_conn: vt_conn.close()
        print("\nDatabase connections closed.")

if __name__ == "__main__":
    # Ensure you have the necessary library for writing Excel files
    try:
        import openpyxl
    except ImportError:
        print("Module 'openpyxl' not found. Please install it using: pip install openpyxl")
    else:
        main()

import tkinter as tk
from tkinter import messagebox
import pandas as pd

# Load the input Excel
input_file = 'ui\input_tables.xlsx'
df = pd.read_excel(input_file)

# Output structure
output = []

# Group tables
tables = df.groupby('table_name')

class FlagSelector:
    def __init__(self, root):
        self.root = root
        self.root.title("Table Flag UI")
        self.current_table_index = 0
        self.tables = list(tables.groups.keys())
        self.selected_flag = tk.StringVar(value="")
        self.selected_columns = []

        # UI Elements
        self.title_label = tk.Label(root, text="", font=("Helvetica", 14, "bold"))
        self.title_label.pack(pady=10)

        self.radio_frame = tk.Frame(root)
        self.radio_key = tk.Radiobutton(self.radio_frame, text="Key", variable=self.selected_flag, value="key")
        self.radio_exclude = tk.Radiobutton(self.radio_frame, text="Exclude", variable=self.selected_flag, value="exclude")
        self.radio_stage = tk.Radiobutton(self.radio_frame, text="Stage", variable=self.selected_flag, value="stage")
        self.radio_key.pack(side="left", padx=20)
        self.radio_exclude.pack(side="left", padx=20)
        self.radio_stage.pack(side="left", padx=20)
        self.radio_frame.pack()

        self.column_listbox = tk.Listbox(root, selectmode=tk.MULTIPLE, height=10, exportselection=False)
        self.column_listbox.pack(pady=10)

        self.ok_button = tk.Button(root, text="OK", command=self.apply_flag)
        self.ok_button.pack(pady=5)

        self.next_button = tk.Button(root, text="Next Table", command=self.next_table)
        self.next_button.pack(pady=5)

        self.log_text = tk.Text(root, height=10, width=80, state="disabled", bg="#f4f4f4")
        self.log_text.pack(pady=10)

        self.quit_button = tk.Button(root, text="Finish & Save", command=self.finish_and_save)
        self.quit_button.pack(pady=10)

        self.load_table()

    def load_table(self):
        self.column_listbox.delete(0, tk.END)
        if self.current_table_index >= len(self.tables):
            self.title_label.config(text="All tables processed.")
            return

        self.selected_flag.set("")
        self.selected_columns = []

        table = self.tables[self.current_table_index]
        self.title_label.config(text=f"Table: {table}")
        columns = tables.get_group(table)['column_name'].tolist()
        for col in columns:
            self.column_listbox.insert(tk.END, col)

    def apply_flag(self):
        flag = self.selected_flag.get()
        selected_indices = self.column_listbox.curselection()
        table = self.tables[self.current_table_index]

        # Error Checks
        if not flag:
            messagebox.showerror("Error", "Please select a flag.")
            return
        if flag != "stage" and not selected_indices:
            messagebox.showerror("Error", "Please select at least one column.")
            return

        if flag == "stage":
            output.append({"table_name": table, "flag": "stage", "column_name": ""})
            self.log(f"{table} marked as STAGE. All columns skipped.")
        else:
            for idx in selected_indices:
                col = self.column_listbox.get(idx)
                output.append({"table_name": table, "flag": flag, "column_name": col})
                self.log(f"{table} → {col} marked as {flag.upper()}.")

        self.selected_flag.set("")
        self.column_listbox.selection_clear(0, tk.END)

    def next_table(self):
        if self.current_table_index < len(self.tables) - 1:
            self.current_table_index += 1
            self.load_table()
        else:
            self.title_label.config(text="✅ All tables done. Click Finish & Save.")

    def log(self, msg):
        self.log_text.config(state="normal")
        self.log_text.insert(tk.END, msg + "\n")
        self.log_text.see(tk.END)
        self.log_text.config(state="disabled")

    def finish_and_save(self):
        if not output:
            messagebox.showwarning("Nothing Saved", "No selections were made.")
            return
        df_out = pd.DataFrame(output)
        df_out.to_excel("output_flags.xlsx", index=False)
        messagebox.showinfo("Saved", "All flags saved to output_flags.xlsx")
        self.root.quit()

# Run the app
root = tk.Tk()
app = FlagSelector(root)
root.mainloop()

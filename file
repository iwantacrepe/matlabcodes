import os
import pandas as pd
import snowflake.connector
import vertica_python
from dotenv import load_dotenv

# --- Configuration & Setup ---
pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
pd.set_option("display.width", None)
pd.set_option("display.max_colwidth", None)

load_dotenv()
SCHEMA = os.getenv("ER1_SCHEMA", "ER1")
OUTPUT_TABLE = "vertica_snowflake_ddl_comparison"

# --- Helper Functions ---
def normalize(name: str) -> str:
    """Returns a case-insensitive version of a string."""
    return name.casefold()

# --- Connection Functions ---
def connect_to_snowflake_for_tables():
    """Establishes a connection to the source Snowflake database for tables."""
    print("Connecting to source Snowflake for tables...")
    try:
        conn = snowflake.connector.connect(
            account = URL_SF.split("//")[-1].split(".snowflakecomputing.com")[0],
            user=USER_SDL_SF,
            private_key_file=os.path.join(KEYTAB_DIR, KEYTAB_FILE_SDL_SF),
            private_key_file_pwd=PASSWORD_SDL_SF,
            database=DB_SDL_SF,
            schema=SCHEMA_SDL_SF,
            warehouse=WAREHOUSE_SDL_SF,
            role=ROLE_SDL_SF,
            authenticator=SNOWFLAKE_JWT
        )
        print("Source Snowflake for tables connected.")
        return conn
    except Exception as e:
        print(f"Error connecting to source Snowflake for tables: {e}")
        raise

def connect_to_snowflake_for_views():
    """Establishes a connection to the source Snowflake database for views."""
    print("Connecting to source Snowflake for views...")
    try:
        conn = snowflake.connector.connect(
            account = URL_SF.split("//")[-1].split(".snowflakecomputing.com")[0],
            user=USER_SDL_SF,
            private_key_file=os.path.join(KEYTAB_DIR, KEYTAB_FILE_SDL_SF),
            private_key_file_pwd=PASSWORD_SDL_SF,
            database="SDL_CONSUMPTION_DB",
            schema=SCHEMA_SDL_SF,
            warehouse=WAREHOUSE_SDL_SF,
            role=ROLE_SDL_SF,
            authenticator=SNOWFLAKE_JWT
        )
        print("Source Snowflake for views connected.")
        return conn
    except Exception as e:
        print(f"Error connecting to source Snowflake for views: {e}")
        raise

def connect_to_vertica():
    """Establishes a connection to the source Vertica database."""
    print("Connecting to source Vertica...")
    try:
        conn = vertica_python.connect(
            host=VERTICA_HOST,
            port=5433,
            user=VERTICA_USER,
            password=VERTICA_PASSWORD,
            database=VERTICA_DB,
            autocommit=True
        )
        print("Source Vertica connected.")
        return conn
    except Exception as e:
        print(f"Error connecting to source Vertica: {e}")
        raise

def connect_to_vertica_dev():
    """Establishes a connection to the destination Vertica DEV database for logging."""
    print("Connecting to destination Vertica (DEV)...")
    try:
        conn = vertica_python.connect(
            host=VERTICA_HOST_DEV,
            port= 5433,
            user=VERTICA_USER_DEV,
            password=VERTICA_PASSWORD_DEV,
            database=VERTICA_DB_DEV,
            autocommit=True
        )
        print("Destination Vertica (DEV) connected.")
        return conn
    except Exception as e:
        print(f"Error connecting to destination Vertica (DEV): {e}")
        raise

# --- Metadata Fetching Functions ---
def get_snowflake_tables(conn, schema_name):
    """Fetches table names from Snowflake."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = %s", (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_vertica_tables(conn, schema_name):
    """Fetches table names from Vertica."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT table_name FROM v_catalog.tables WHERE table_schema = %s", (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_snowflake_columns(conn, table_name, schema_name):
    """Fetches column names for a given table/view from Snowflake."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = %s AND table_name = %s", (schema_name, table_name))
        return [row[0] for row in cur.fetchall()]

def get_vertica_table_columns(conn, table_name, schema_name):
    """Fetches column names for a given table from Vertica."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT column_name FROM v_catalog.columns WHERE table_schema = %s AND UPPER(table_name) = UPPER(%s)", (schema_name, table_name))
        return [row[0] for row in cur.fetchall()]

def get_snowflake_views(conn, schema_name):
    """Fetches view names from Snowflake."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT table_name FROM INFORMATION_SCHEMA.VIEWS WHERE table_schema = %s", (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_vertica_views(conn, schema_name):
    """Fetches view names from Vertica."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT table_name FROM v_catalog.views WHERE table_schema = %s", (schema_name,))
        return [row[0] for row in cur.fetchall()]

def get_vertica_view_columns(conn, view_name, schema_name):
    """Fetches column names for a given view from Vertica."""
    with conn.cursor() as cur:
        cur.execute(f"SELECT column_name FROM v_catalog.view_columns WHERE table_schema = %s AND UPPER(table_name) = UPPER(%s)", (schema_name, view_name))
        return [row[0] for row in cur.fetchall()]

# --- Data Writing Functions ---
def write_table_mismatches_to_vertica(conn, mismatches_df):
    """Clears the target table and writes the table mismatch DataFrame to Vertica."""
    if mismatches_df.empty:
        print("\nNo table mismatches found. Nothing to write.")
        return

    print(f"\nWriting {len(mismatches_df)} table mismatches to Vertica table: {OUTPUT_TABLE}...")
    with conn.cursor() as cur:
        try:
            print(f"Deleting table {OUTPUT_TABLE} data that is older than 7 days...")
            delete_query = f"DELETE FROM ER1.{OUTPUT_TABLE} WHERE insrt_ts < CURRENT_TIMESTAMP - INTERVAL '7 DAY' OR CURRENT_DATE = TRUNC(insrt_ts)"
            cur.execute(delete_query)
            print("Table truncated.")

            insert_query = f"""
                INSERT INTO ER1.{OUTPUT_TABLE} (table_name, column_name, object_type, present_in_vertica, present_in_snowflake)
                VALUES (%s, %s, %s, %s, %s)
            """
            data_to_insert = [tuple(row) for row in mismatches_df.to_numpy()]

            cur.executemany(insert_query, data_to_insert)
            conn.commit()
            print(f"Successfully inserted {len(data_to_insert)} records.")

        except Exception as e:
            print(f"An error occurred while writing to Vertica: {e}")
            conn.rollback()
            raise

def write_view_mismatches_to_vertica(conn, mismatches_df):
    """writes the view mismatch DataFrame to Vertica."""
    if mismatches_df.empty:
        print("\nNo view mismatches found. Nothing to write.")
        return

    print(f"\nWriting {len(mismatches_df)} view mismatches to Vertica table: {OUTPUT_TABLE}...")
    with conn.cursor() as cur:
        try:
            insert_query = f"""
                INSERT INTO ER1.{OUTPUT_TABLE} (table_name, column_name, object_type, present_in_vertica, present_in_snowflake)
                VALUES (%s, %s, %s, %s, %s)
            """
            data_to_insert = [tuple(row) for row in mismatches_df.to_numpy()]

            cur.executemany(insert_query, data_to_insert)
            conn.commit()
            print(f"Successfully inserted {len(data_to_insert)} records.")

        except Exception as e:
            print(f"An error occurred while writing to Vertica: {e}")
            conn.rollback()
            raise

# --- Main Logic ---
def main_table(config):
    global VERTICA_HOST, VERTICA_USER, VERTICA_PASSWORD, VERTICA_DB
    global VERTICA_HOST_DEV, VERTICA_USER_DEV, VERTICA_PASSWORD_DEV, VERTICA_DB_DEV
    global URL_SF, KEYTAB_FILE_SDL_SF, PASSWORD_SDL_SF, DB_SDL_SF
    global DB_SDL_SF_VW, SCHEMA_SDL_SF, USER_SDL_SF, WAREHOUSE_SDL_SF
    global ROLE_SDL_SF, KEYTAB_DIR, DATA_DIR_VAR, SNOWFLAKE_JWT

    VERTICA_HOST = config["VERTICA_HOST"]
    VERTICA_USER = config["VERTICA_USER"]
    VERTICA_PASSWORD = config["VERTICA_PASSWORD"]
    VERTICA_DB = config["VERTICA_DB"]
    VERTICA_HOST_DEV = config["VERTICA_HOST_DEV"]
    VERTICA_USER_DEV = config["VERTICA_USER_DEV"]
    VERTICA_PASSWORD_DEV = config["VERTICA_PASSWORD_DEV"]
    VERTICA_DB_DEV = config["VERTICA_DB_DEV"]
    URL_SF = config["URL_SF"]
    KEYTAB_FILE_SDL_SF = config["KEYTAB_FILE_SDL_SF"]
    PASSWORD_SDL_SF = config["PASSWORD_SDL_SF"]
    DB_SDL_SF = config["DB_SDL_SF"]
    DB_SDL_SF_VW = config["DB_SDL_SF_VW"]
    SCHEMA_SDL_SF = config["SCHEMA_SDL_SF"]
    USER_SDL_SF = config["USER_SDL_SF"]
    WAREHOUSE_SDL_SF = config["WAREHOUSE_SDL_SF"]
    ROLE_SDL_SF = config["ROLE_SDL_SF"]
    KEYTAB_DIR = config["KEYTAB_DIR"]
    DATA_DIR_VAR = config["DATA_DIR_VAR"]
    SNOWFLAKE_JWT = config["SNOWFLAKE_JWT"]
    sf_conn = None
    vt_conn = None
    vt_dev_conn = None

    try:
        sf_conn = connect_to_snowflake_for_tables()
        vt_conn = connect_to_vertica()
        vt_dev_conn = connect_to_vertica_dev()
        sf_tables = get_snowflake_tables(sf_conn, SCHEMA)
        vt_tables = get_vertica_tables(vt_conn, SCHEMA)

        sf_table_map = {normalize(t): t for t in sf_tables}
        vt_table_map = {normalize(t): t for t in vt_tables}

        sf_norm_set = set(sf_table_map.keys())
        vt_norm_set = set(vt_table_map.keys())

        mismatches = []
        tables_only_in_sf = sf_norm_set - vt_norm_set
        tables_only_in_vt = vt_norm_set - sf_norm_set

        for norm_table in sorted(tables_only_in_sf):
            mismatches.append({
                "TableName": sf_table_map[norm_table],
                "ColumnName": "N/A",
                "ObjectType": "table",
                "PresentInVertica": "N",
                "PresentInSnowflake": "Y",
            })

        for norm_table in sorted(tables_only_in_vt):
            mismatches.append({
                "TableName": vt_table_map[norm_table],
                "ColumnName": "N/A",
                "ObjectType": "table",
                "PresentInVertica": "Y",
                "PresentInSnowflake": "N",
            })

        common_tables = sorted(sf_norm_set.intersection(vt_norm_set))
        print(f"\nFound {len(common_tables)} common tables to compare for column differences...")

        for norm_table in common_tables:
            sf_table_name = sf_table_map[norm_table]
            vt_table_name = vt_table_map[norm_table]

            sf_cols = get_snowflake_columns(sf_conn, sf_table_name, SCHEMA)
            vt_cols = get_vertica_table_columns(vt_conn, vt_table_name, SCHEMA)

            sf_col_map = {normalize(col): col for col in sf_cols}
            vt_col_map = {normalize(col): col for col in vt_cols}

            sf_col_norm_set = set(sf_col_map.keys())
            vt_col_norm_set = set(vt_col_map.keys())

            cols_only_in_sf = sf_col_norm_set - vt_col_norm_set
            cols_only_in_vt = vt_col_norm_set - sf_col_norm_set

            for col_norm in sorted(cols_only_in_sf):
                mismatches.append({
                    "TableName": sf_table_name,
                    "ColumnName": sf_col_map[col_norm],
                    "ObjectType": "column",
                    "PresentInVertica": "N",
                    "PresentInSnowflake": "Y",
                })

            for col_norm in sorted(cols_only_in_vt):
                 mismatches.append({
                    "TableName": sf_table_name, 
                    "ColumnName": vt_col_map[col_norm],
                    "ObjectType": "column",
                    "PresentInVertica": "Y",
                    "PresentInSnowflake": "N",
                })

        if not mismatches:
            print("\n=== TABLE COMPARISON COMPLETE: No mismatches found. ===")
        else:
            final_df = pd.DataFrame(mismatches)
            print("\n=== TABLE MISMATCHES FOUND ===")
            print(final_df.to_string(index=False))
            
            write_table_mismatches_to_vertica(vt_dev_conn, final_df)

    except Exception as e:
        print(f"\nAn unexpected error occurred in main_table execution: {e}")
    finally:
        if sf_conn:
            sf_conn.close()
            print("\nTable Snowflake connection closed.")
        if vt_conn:
            vt_conn.close()
            print("Table Vertica source connection closed.")
        if vt_dev_conn:
            vt_dev_conn.close()
            print("Table Vertica dev connection closed.")

def main_views(config):
    global VERTICA_HOST, VERTICA_USER, VERTICA_PASSWORD, VERTICA_DB
    global VERTICA_HOST_DEV, VERTICA_USER_DEV, VERTICA_PASSWORD_DEV, VERTICA_DB_DEV
    global URL_SF, KEYTAB_FILE_SDL_SF, PASSWORD_SDL_SF, DB_SDL_SF
    global DB_SDL_SF_VW, SCHEMA_SDL_SF, USER_SDL_SF, WAREHOUSE_SDL_SF
    global ROLE_SDL_SF, KEYTAB_DIR, DATA_DIR_VAR, SNOWFLAKE_JWT

    VERTICA_HOST = config["VERTICA_HOST"]
    VERTICA_USER = config["VERTICA_USER"]
    VERTICA_PASSWORD = config["VERTICA_PASSWORD"]
    VERTICA_DB = config["VERTICA_DB"]
    VERTICA_HOST_DEV = config["VERTICA_HOST_DEV"]
    VERTICA_USER_DEV = config["VERTICA_USER_DEV"]
    VERTICA_PASSWORD_DEV = config["VERTICA_PASSWORD_DEV"]
    VERTICA_DB_DEV = config["VERTICA_DB_DEV"]
    URL_SF = config["URL_SF"]
    KEYTAB_FILE_SDL_SF = config["KEYTAB_FILE_SDL_SF"]
    PASSWORD_SDL_SF = config["PASSWORD_SDL_SF"]
    DB_SDL_SF = config["DB_SDL_SF"]
    DB_SDL_SF_VW = config["DB_SDL_SF_VW"]
    SCHEMA_SDL_SF = config["SCHEMA_SDL_SF"]
    USER_SDL_SF = config["USER_SDL_SF"]
    WAREHOUSE_SDL_SF = config["WAREHOUSE_SDL_SF"]
    ROLE_SDL_SF = config["ROLE_SDL_SF"]
    KEYTAB_DIR = config["KEYTAB_DIR"]
    DATA_DIR_VAR = config["DATA_DIR_VAR"]
    SNOWFLAKE_JWT = config["SNOWFLAKE_JWT"]
    sf_conn = None
    vt_conn = None
    vt_dev_conn = None

    try:
        sf_conn = connect_to_snowflake_for_views()
        vt_conn = connect_to_vertica()
        vt_dev_conn = connect_to_vertica_dev()

        sf_views = get_snowflake_views(sf_conn, SCHEMA)
        vt_views = get_vertica_views(vt_conn, SCHEMA)

        sf_view_map = {normalize(t): t for t in sf_views}
        vt_view_map = {normalize(t): t for t in vt_views}

        sf_norm_set = set(sf_view_map.keys())
        vt_norm_set = set(vt_view_map.keys())

        mismatches = []
        views_only_in_sf = sf_norm_set - vt_norm_set
        views_only_in_vt = vt_norm_set - sf_norm_set

        for norm_view in sorted(views_only_in_sf):
            mismatches.append({
                "ViewName": sf_view_map[norm_view],
                "ColumnName": "N/A",
                "ObjectType": "view",
                "PresentInVertica": "N",
                "PresentInSnowflake": "Y",
            })

        for norm_view in sorted(views_only_in_vt):
            mismatches.append({
                "ViewName": vt_view_map[norm_view],
                "ColumnName": "N/A",
                "ObjectType": "view",
                "PresentInVertica": "Y",
                "PresentInSnowflake": "N",
            })

        common_views = sorted(sf_norm_set.intersection(vt_norm_set))
        print(f"\nFound {len(common_views)} common views to compare for column differences...")

        for norm_view in common_views:
            sf_view_name = sf_view_map[norm_view]
            vt_view_name = vt_view_map[norm_view]

            sf_cols = get_snowflake_columns(sf_conn, sf_view_name, SCHEMA)
            vt_cols = get_vertica_view_columns(vt_conn, vt_view_name, SCHEMA)

            sf_col_map = {normalize(col): col for col in sf_cols}
            vt_col_map = {normalize(col): col for col in vt_cols}

            sf_col_norm_set = set(sf_col_map.keys())
            vt_col_norm_set = set(vt_col_map.keys())

            cols_only_in_sf = sf_col_norm_set - vt_col_norm_set
            cols_only_in_vt = vt_col_norm_set - sf_col_norm_set

            for col_norm in sorted(cols_only_in_sf):
                mismatches.append({
                    "ViewName": sf_view_name,
                    "ColumnName": sf_col_map[col_norm],
                    "ObjectType": "viewcolumn",
                    "PresentInVertica": "N",
                    "PresentInSnowflake": "Y",
                })

            for col_norm in sorted(cols_only_in_vt):
                 mismatches.append({
                    "ViewName": sf_view_name,
                    "ColumnName": vt_col_map[col_norm],
                    "ObjectType": "viewcolumn",
                    "PresentInVertica": "Y",
                    "PresentInSnowflake": "N",
                })
        
        if not mismatches:
            print("\n=== VIEW COMPARISON COMPLETE: No mismatches found. ===")
        else:
            final_df = pd.DataFrame(mismatches)
            print("\n=== VIEW MISMATCHES FOUND ===")
            print(final_df.to_string(index=False))

            write_view_mismatches_to_vertica(vt_dev_conn, final_df)

    except Exception as e:
        print(f"\nAn unexpected error occurred in main_views execution: {e}")
    finally:
        if sf_conn:
            sf_conn.close()
            print("\nView Snowflake connection closed.")
        if vt_conn:
            vt_conn.close()
            print("View Vertica source connection closed.")
        if vt_dev_conn:
            vt_dev_conn.close()
            print("View Vertica dev connection closed.")

# --- Execution Block ---
if __name__ == "__main__":
    # These variables must be populated by the execution environment (e.g., shell environment variables)
    # The original file (File 1) implies these are pre-existing in the script's namespace.
    # For a runnable example, you would replace these with actual values or load them.
    # For example:
    # from dotenv import load_dotenv
    # load_dotenv()
    # VERTICA_HOST = os.getenv("VERTICA_HOST")
    
    config = {
        "VERTICA_HOST": VERTICA_HOST,
        "VERTICA_USER": VERTICA_USER,
        "VERTICA_PASSWORD": VERTICA_PASSWORD,
        "VERTICA_DB": VERTICA_DB,
        "VERTICA_HOST_DEV": VERTICA_HOST_DEV,
        "VERTICA_USER_DEV": VERTICA_USER_DEV,
        "VERTICA_PASSWORD_DEV": VERTICA_PASSWORD_DEV,
        "VERTICA_DB_DEV": VERTICA_DB_DEV,
        "URL_SF": URL_SF,
        "KEYTAB_FILE_SDL_SF": KEYTAB_FILE_SDL_SF,
        "PASSWORD_SDL_SF": PASSWORD_SDL_SF,
        "DB_SDL_SF": DB_SDL_SF,
        "DB_SDL_SF_VW": DB_SDL_SF_VW,
        "SCHEMA_SDL_SF": SCHEMA_SDL_SF,
        "USER_SDL_SF": USER_SDL_SF,
        "WAREHOUSE_SDL_SF": WAREHOUSE_SDL_SF,
        "ROLE_SDL_SF": ROLE_SDL_SF,
        "KEYTAB_DIR": KEYTAB_DIR,
        "DATA_DIR_VAR": DATA_DIR_VAR,
        "SNOWFLAKE_JWT": "SNOWFLAKE_JWT"
    }

    print("--- Starting Table Comparison ---")
    main_table(config)
    print("\n--- Starting View Comparison ---")
    main_views(config)
        
    print("\nSuccessful")
    outvar='script successful'
